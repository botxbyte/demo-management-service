openapi: 3.0.0
info:
  title: Demo Management Service API
  version: 2.0.1
  description: API for managing demos, including creation, updates, member assignments, and demo lifecycle operations

servers:
  - url: https://159.203.10.100:8501

paths:

  # Demo endpoints
  /demos/:
    get:
      tags:
        - Demo
      summary: Get all demos
      operationId: listDemos
      parameters:
        - $ref: '#/components/parameters/UserIdHeader'
        - $ref: '#/components/parameters/WorkspaceIdHeader'
        
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: Number of records to skip
          example: 0
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
          required: false
          description: Number of items to return
          example: 100
        - in: query
          name: order_by
          schema:
            type: string
            default: "-created_at"
          required: false
          description: Field to order by. Prefix with '-' for descending order
          example: "-created_at"
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search query string to filter results
          example: "Marketing"
        - in: query
          name: filters
          schema:
            type: array
            items:
              type: string
          required: false
          description: List of filter dicts as JSON strings
          example: '["{\"field\": \"status\", \"operator\": \"eq\", \"value\": \"created\"}", "{\"field\": \"is_active\", \"operator\": \"eq\", \"value\": true}"]'
        - in: query
          name: status
          schema:
            type: string
            enum: ['creating', 'created', 'updating', 'updated', 'deleting', 'deleted']
          required: false
          description: Filter demos by status
          example: "created"
      responses:
        '200':
          description: List of demos retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DemoModel'
                  pagination:
                    $ref: '#/components/schemas/PaginationMeta'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /demo/create/:
    post:
      tags:
        - Demo
      summary: Create a new demo
      operationId: createDemo
      description: | 
        **publishes** a message to the internal **`demo_creation_topic`** queue.
        Message format:
        ```json
        {
          "demo_id": "uuid"
        }
        ```
      parameters:
        - $ref: '#/components/parameters/UserIdHeader'
        - $ref: '#/components/parameters/WorkspaceIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 200
                  example: "Marketing Team"
                logo:
                  type: string
                  format: uri
                  nullable: true
                
              required:
                - name
      responses:
        '201':
          description: Demo created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Demo created successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /demo/read/{demo_id}/:
    get:
      tags:
        - Demo
      summary: Get a demo by ID
      operationId: getDemo
      parameters:
        - $ref: '#/components/parameters/UserIdHeader'
        - $ref: '#/components/parameters/WorkspaceIdHeader'
        - in: path
          name: demo_id
          required: true
          schema:
            type: string
            format: uuid
          description: Demo identifier
          example: "bd08612-1a9d-4a6e-8431-1demoid"
        
      responses:
        '200':
          description: Demo retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/DemoModel'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /demo/update/{demo_id}/:
    patch:
      tags:
        - Demo
      summary: Update a demo
      operationId: updateDemo
      parameters:
        - $ref: '#/components/parameters/UserIdHeader'
        - $ref: '#/components/parameters/WorkspaceIdHeader'
        - in: path
          name: demo_id
          required: true
          schema:
            type: string
            format: uuid
          description: Demo identifier
          example: "bd08612-1a9d-4a6e-8431-1demoid"
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 200
                  example: "Marketing Team Updated"
                logo:
                  type: string
                  format: uri
                  nullable: true
                
      responses:
        '200':
          description: Demo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Demo updated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /demo/delete/{demo_id}/:
    delete:
      tags:
        - Demo
      summary: Delete a demo
      operationId: deleteDemo
      description: |
        **publishes** a message to the internal **`demo_deletion_topic`** queue.
        Message format:
        ```json
        {
          "demo_id": "uuid"
        }
        ```
      parameters:
        - $ref: '#/components/parameters/UserIdHeader'
        - $ref: '#/components/parameters/WorkspaceIdHeader'
        - in: path
          name: demo_id
          required: true
          schema:
            type: string
            format: uuid
          description: Demo identifier
          example: "bd08612-1a9d-4a6e-8431-1demoid"
        
      responses:
        '200':
          description: Demo deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Demo deleted successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /demo/update/status/{demo_id}/:
    patch:
      tags:
        - Demo
      summary: Update demo status and error messages
      operationId: updateDemoStatus
      description: |
        Updates the demo status and error messages.
        This endpoint allows updating only the status, error_message, and error_user_message fields.
      parameters:
        - $ref: '#/components/parameters/UserIdHeader'
        - $ref: '#/components/parameters/WorkspaceIdHeader'
        - in: path
          name: demo_id
          required: true
          schema:
            type: string
            format: uuid
          description: Demo identifier
          example: "bd08612-1a9d-4a6e-8431-1demoid"
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: ['creating', 'created', 'updating', 'updated', 'deleting', 'deleted']
                  example: "updated"
                error_message:
                  type: string
                  nullable: true
                  description: Technical error message for debugging
                  example: "Database connection timeout after 30 seconds"
                error_user_message:
                  type: string
                  nullable: true
                  description: User-friendly error message for display
                  example: "Something went wrong. Please try again later."
      responses:
        '200':
          description: Demo status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Demo status updated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /demo/update/is-active/{demo_id}/:
    patch:
      tags:
        - Demo
      summary: Update demo active status
      operationId: updateDemoIsActive
      description: |
        Updates the demo is_active status.
        This endpoint allows updating only the is_active field.
      parameters:
        - $ref: '#/components/parameters/UserIdHeader'
        - $ref: '#/components/parameters/WorkspaceIdHeader'
        - in: path
          name: demo_id
          required: true
          schema:
            type: string
            format: uuid
          description: Demo identifier
          example: "bd08612-1a9d-4a6e-8431-1demoid"
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_active:
                  type: boolean
                  description: Whether the demo is active
                  example: true
      responses:
        '200':
          description: Demo active status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Demo active status updated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  


 
components:
  
  parameters:
    UserIdHeader:
      name: user_id
      in: header
      required: true
      schema:
        type: string
        format: uuid
      description: ID of the authenticated user
      example: "c8d8869-4060-4e8a-ba30-c6da3buserid"
    
    WorkspaceIdHeader:
      name: workspace_id
      in: header
      required: true
      schema:
        type: string
        format: uuid
      description: ID of the demo
      example: "bd08612-1a9d-4a6e-8431-1workspaceid"
  
  schemas:
    
    BaseAppModel:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          description: Timestamp when record was created
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when record was last updated
          example: "2024-01-15T10:30:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true

          description: Timestamp when record was deleted
          example: "2024-01-15T10:30:00Z"
        created_by:
          type: string
          format: uuid
          description: ID of user who created the record
          
          example: "c8d8869-4060-4e8a-ba30-c6da3buserid"
        updated_by:
          type: string
          format: uuid
          nullable: true
          description: ID of user who last updated the record
          
          example: "c8d8869-4060-4e8a-ba30-c6da3buserid"
        deleted_by:
          type: string
          format: uuid
          nullable: true
          description: ID of user who deleted the record
          
          example: "c8d8869-4060-4e8a-ba30-c6da3buserid"
        status:
          type: string
          enum: ['creating', 'created', 'updating', 'updated', 'deleting', 'deleted']
          description: Current processing status of the record
          
          example: "created"
        is_active:
          type: boolean
          description: Whether the record is active (not the same as status)
          
          example: true
        error_message:
          type: string
          nullable: true
          description: Technical error message for debugging
          
          example: "Database connection timeout after 30 seconds"
        error_user_message:
          type: string
          nullable: true
          description: User-friendly error message for display
          
          example: "Something went wrong. Please try again later."
      
    # Demo
    DemoModel:
      allOf:
        - $ref: '#/components/schemas/BaseAppModel'
        - type: object
          properties:
            demo_id:
              type: string
              format: uuid
              readOnly: true
              description: Demo identifier
              
              example: "bd08612-1a9d-4a6e-8431-1demoid"
            name:
              type: string
              maxLength: 200
              description: Demo name
              x-searchable: true
              example: "Marketing Team"
            logo:
              type: string
              format: uri
              nullable: true
              description: Demo logo URL
              
              example: "https://example.com/logo.png"
            
          required:
            - demo_id
            - name

    
    # Pagination Meta
    PaginationMeta:
      type: object
      properties:
        total_count:
          type: integer
          example: 50
          description: Total number of records
        offset:
          type: integer
          example: 0
          description: Current offset
        limit:
          type: integer
          example: 100
          description: Number of items per request
        total_pages:
          type: integer
          example: 5
          description: Total number of pages
        
    

  # Responses
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error_message:
                type: string
                example: "Bad Request"

    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error_message:
                type: string
                example: "Not Found"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error_message:
                type: string
                example: "Internal Server Error"
